{
	"id": "b5a5dde02abf3113da55ebbd94157cd4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Notes.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.26;\n\n// 修饰符\n    // public: 变量+函数；不仅使得变量本身可以被外部合约访问，还会自动生成一个获取该变量值的 getter 函数。这个 getter 函数的可见性也是 public\n    // private: 变量+函数；合约内部\n    // internal: 变量+函数 合约+子合约\n    // external: 修饰函数；只能从外部合约调用，不能从合约内部调用。这对于节省 gas 非常有用，因为 external 函数不需要在合约内部创建一个新的环境来执行\n\n    // view:  视图函数；可以读取但不会修改以太坊的状态。这意味着函数可以访问状态变量和其他存储中的数据，但不能进行任何写操作\n    // pure: 纯函数；不会读取也不会修改以太坊的状态。这意味着函数不应该访问任何状态变量或存储变量，也不应该触发任何事件或进行网络调用\n\n// EVM(Ethereum Virtual Machine)\n    // Stack\n    // Memory: temp variable，可以修改\n    // Storage: perm variable\n    // Calldata: temp variable，不能修改\n    // Code\n    // Logs"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"sources": {
			"contracts/Notes.sol": {
				"ast": {
					"absolutePath": "contracts/Notes.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".26"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						}
					],
					"src": "32:1097:0"
				},
				"id": 0
			}
		}
	}
}